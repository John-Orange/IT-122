<html>
<head>
    <title>React Fruits</title>

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body>

<div id="root"></div>
<script type="text/babel">

    //const items = <%- fruits %>;

    // define other components
    const Fruits = (props) => {
      const listItems = props.items.map((item) =>
       <li onClick={props.onClick} key={item._id}>
        {item.name}
        </li>);
      return <ul>{listItems}</ul>;
    };
  
    const Detail = (props) => {
      return(
        <div>
          <h3>Detail of the fruits</h3>
          <b>name:</b> <input type="text" name="name" value={props.detail.name || ""} onChange={props.onChange}/> <br/>
          <b>color:</b>  <input type="text" name="color" value={props.detail.color || ""} onChange={props.onChange}/> <br/>
          <b>calories:</b> <input type="text" name="calories" value={props.detail.calories || ""} onChange={props.onChange}/> <br/>
          <b>orgin:</b> <input type="text" name="orgin" value={props.detail.orgin || ""} onChange={props.onChange}/> <br/>
        </div>
      )
    }

    const ClearButton = (props) => {
      return <button onClick={props.onClick}>Clear</button>;
    };

    const SaveButton = (props) => {
      return <button onClick={props.onClick}>Save</button>;
    };

    const DeleteButton = (props) => {
      return <button onClick={props.onClick}>Delete</button>;
    };


    const App = (props) => {
      const [items, setItems] = React.useState([]);
      const [currentItem, setCurrentItem] = React.useState({});

      
//
      React.useEffect(() => {
        const fetchData = async () => {
          fetch("/api/fruits").then(res => res.json())
          .then((json) => {
            setItems(json);
          })
        }
        fetchData()
      }, []);


    // list click event handler
      const selectItem = (event) => {
        console.log(event.target);
        const found = items.find((item) => {
          return item.name === event.target.innerText;
        });
        setCurrentItem(found);
      };

      //save
      const saveItem = () => {
        if (!currentItem.name) {
          return;
        }

        fetch('/api/fruits', {
          method:"POST",
          headers:{ 'Content-Type': 'application/json'},
          body: JSON.stringify(currentItem)
        })
        .then(res=> res.json())
        .then((data) =>{
        // if item has no _id, it wasn't previously saved DB
          if (!currentItem._id) {
            currentItem._id = data._id;
            setCurrentItem(currentItem);
            // update items list
            let newItems = [...items];
            newItems.push(currentItem);
            setItems(newItems);
          }
        });
      }

      
    //delete
      const deleteItem =() => {
        console.log('should delete')
        let id = currentItem.name;
        //delete item from DB
        fetch(`/api/fruits/${id}`, {
          method: "DELETE"
        })
          .then(res => res.json())
          .then((data) => {
            // remove item from list
            const newItems = items.filter((item) => {
              return item.name !== id;
            });
            setItems(newItems);
            // clear form
            setCurrentItem({})
          });
      }  

    // update list state
      const handleChange = (event) => {
        //console.log(event.target)
        let newItem = {...currentItem};
        newItem[event.target.name] = event.target.value;
        //console.log(newItem)
        
        //update currentItem state
        setCurrentItem(newItem);
        //update list state
        const updatedItems = items.map((item) => {
          if (item._id === newItem.id) {
            return newItem;
          }
          return item;
        });
        setItems(items);
      }

      const handleClear = () => {
        setItems(<%- fruits %>);
        setCurrentItem({});
      };

      
      return (
        <div>
          <h1>Fruits</h1>
          <Fruits items={items} onClick={selectItem}/>
          <Detail detail={currentItem} onChange={handleChange}/>
          <ClearButton onClick={handleClear}/>
          <SaveButton onClick={saveItem}/>
          <DeleteButton onClick={deleteItem}/>
        </div>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>